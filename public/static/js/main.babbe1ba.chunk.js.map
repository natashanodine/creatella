{"version":3,"sources":["components/LoadingComponent.js","components/ProductsComponent.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","axios","require","Products","state","products","isLoading","error","_injectAdsInList","list","setState","AdsList","Array","isArray","productsAndAdsList","map","item","index","_getProducts","get","then","data","catch","_sortPrice","sortedProducts","sort","a","b","price","_sortSize","size","_sortId","reA","reN","aA","id","replace","bA","aN","parseInt","bN","_timeAgo","prevDate","diff","Number","Date","seconds","Math","round","minute","hour","day","this","hasError","console","log","onClick","key","toFixed","style","fontSize","face","date","getTime","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6RAEcA,EAAU,WACpB,OACI,yBAAKC,UAAU,UACX,0BAAMA,UAAU,oDAChB,8CCHNC,EAAQC,EAAQ,IA+JPC,E,2MAvJbC,MAAQ,CAACC,SAAU,GACfC,WAAW,EACXC,MAAO,M,EAGXC,iBAAmB,SAAAC,GAGjB,EAAKC,SAAS,CAAEJ,WAAW,IAC3B,IAAMK,EAAU,CAAC,MAAM,QAEvB,GAAIC,MAAMC,QAAQJ,GAAO,CACvB,IACMK,EAAqBL,EAAKM,KAAI,SAACC,EAAMC,GAGzC,OAAIA,EAJa,KAIU,GAAe,IAAVA,EAEvBN,EAAQ,GAIVK,KAGT,EAAKN,SAAS,CAAEI,yB,EAIpBI,aAAe,WAEb,EAAKR,SAAS,CAAEJ,WAAW,IAK3BL,EAAMkB,IAAI,kCAAkCC,MAAK,SAAAX,GAAI,OAAI,EAAKD,iBAAiBC,EAAKY,SACjFC,OAAM,SAAAf,GAAK,OAAI,EAAKG,SAAS,CAAEH,QAAOD,WAAW,Q,EAGtDiB,WAAa,WAAO,IAIZC,EAHyB,EAAKpB,MAA5BU,mBAGkCW,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAQD,EAAEC,SACrE,EAAKlB,SAAS,CAAEI,mBAAoBU,K,EAGtCK,UAAY,WAAO,IAIXL,EAHyB,EAAKpB,MAA5BU,mBAGkCW,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,KAAOH,EAAEG,QACpE,EAAKpB,SAAS,CAAEI,mBAAoBU,K,EAGtCO,QAAU,WACR,IAAIC,EAAM,aACTC,EAAM,UACCxB,EAAS,EAAKL,MAAdK,KACXA,EAAKgB,MAAK,SAAsBC,EAAGC,GAChC,IAAIO,EAAKR,EAAES,GAAGC,QAAQJ,EAAK,IACvBK,EAAKV,EAAEQ,GAAGC,QAAQJ,EAAK,IAC3B,GAAIE,IAAOG,EAAI,CACjB,IAAIC,EAAKC,SAASb,EAAES,GAAGC,QAAQH,EAAK,IAAK,IACrCO,EAAKD,SAASZ,EAAEQ,GAAGC,QAAQH,EAAK,IAAK,IACzC,OAAOK,IAAOE,EAAK,EAAIF,EAAKE,EAAK,GAAK,EAEtC,OAAON,EAAKG,EAAK,GAAK,KAGpB,EAAK3B,SAAS,CAAED,U,EAGjBgC,SAAW,SAACC,GACP,IAAMC,EAAOC,OAAO,IAAIC,MAAUH,EAMlC,QAAQ,GACJ,KAAKC,EANM,IAOP,IAAMG,EAAUC,KAAKC,MAAML,EAAO,KACjC,MAAM,GAAN,OAAUG,EAAV,YAAqBA,EAAU,EAAI,UAAY,SAA/C,QACL,KAAKH,EARIM,KASL,OAAOF,KAAKC,MAAML,EAVX,KAU4B,eACvC,KAAKA,EATGO,MAUJ,OAAOH,KAAKC,MAAML,EAXbM,MAW4B,aACrC,KAAKN,EAVKQ,OAWN,OAAOJ,KAAKC,MAAML,EAZdO,OAY4B,YACpC,KAAKP,EAXIQ,QAYL,OAAOJ,KAAKC,MAAML,EAbZQ,QAa4B,cACtC,KAAKR,EAbIQ,QAcL,OAAOJ,KAAKC,MAAML,EAdbQ,SAc4B,aACrC,QACI,MAAO,K,mFAMnBC,KAAKlC,iB,+BAGG,IAAD,SAG6CkC,KAAKhD,MAAjDU,EAHD,EAGCA,mBAAoBR,EAHrB,EAGqBA,UAAW+C,EAHhC,EAGgCA,SAGvC,OAFJC,QAAQC,IAAIzC,IAEHuC,GAAY/C,EACR,kBAAC,EAAD,MAIL+C,IAAa/C,EACR,4CAIP,6BAEC,yBAAKN,UAAU,OACnB,yBAAKA,UAAU,UACd,4BAAQwD,QAASJ,KAAK7B,YAAtB,iCACA,4BAAQiC,QAASJ,KAAKvB,WAAtB,6BACA,4BAAQ2B,QAASJ,KAAKrB,SAAtB,gBAGKjB,GACCA,EAAmBC,KAAI,SAAAC,GAAI,OACzB,yBAAMyC,IAAKzC,EAAKmB,GAAInC,UAAU,OAC5B,yBAAKA,UAAU,SACb,wCAAcgB,EAAKY,MAAQ,KAAK8B,QAAQ,KAG1C,yBAAK1D,UAAU,SACb,uBAAG2D,MAAO,CAAEC,SAAS,GAAD,OAAK5C,EAAKc,KAAV,QAApB,IAA4Cd,EAAK6C,OAG7D,yBAAK7D,UAAU,SACb,yCAAe,EAAKyC,SAAS,IAAII,KAAK7B,EAAK8C,MAAMC,sB,GApJhCC,IAAMC,W,MCOdC,MAPf,WACE,OAEc,kBAAC,EAAD,OCIIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,MAAK,SAAA2D,GACjCA,EAAaC,kB","file":"static/js/main.babbe1ba.chunk.js","sourcesContent":["import React from 'react';\n\nexport  const Loading = () => {\n    return (\n        <div className=\"col-12\">\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\n            <p>Loading . . .</p>\n        </div>\n    );\n};\n","import React from \"react\";\r\nimport { Loading } from \"./LoadingComponent\";\r\n\r\nconst axios = require('axios');\r\n\r\nclass Products extends React.Component {\r\n  // No need for a constructor\r\n  // for just defining the state.\r\n  // it would've been useful if we\r\n  // wanted to use a prop value as\r\n  // the initial state\r\n  state = {products: [],\r\n      isLoading: false,\r\n      error: null\r\n    };\r\n\r\n  _injectAdsInList = list => {\r\n    // an array of your ads\r\n\t\r\n    this.setState({ isLoading: false });\r\n    const AdsList = ['111','2222'];\r\n\r\n    if (Array.isArray(list)) {\r\n      const insertAdAt = 21;\r\n      const productsAndAdsList = list.map((item, index) => {\r\n        // not sure about this calculation\r\n        // but this should be done here\r\n        if (index % insertAdAt === 0 && index !== 0) {\r\n          // its the 20th item insert an ad\r\n          return AdsList[0];\r\n        }\r\n\r\n        // otherwise insert the item\r\n        return item;\r\n      });\r\n\r\n      this.setState({ productsAndAdsList });\r\n    }\r\n  };\r\n\r\n  _getProducts = () => {\r\n\t  \r\n    this.setState({ isLoading: true });\r\n    // make the fetch call here\r\n    // also it would be easier if you\r\n    // use a library like axios (https://www.npmjs.com/package/axios)\r\n    // for making http requests\r\n    axios.get('http://localhost:3000/products').then(list => this._injectAdsInList(list.data))\r\n      .catch(error => this.setState({ error, isLoading: false }));\r\n  };\r\n\r\n  _sortPrice = () => {\r\n    const { productsAndAdsList } = this.state;\r\n    // instead of mutating the origin array\r\n    // create a new one, and update the state\r\n    const sortedProducts = productsAndAdsList.sort((a, b) => a.price - b.price);\r\n    this.setState({ productsAndAdsList: sortedProducts });\r\n  };\r\n\r\n  _sortSize = () => {\r\n    const { productsAndAdsList } = this.state;\r\n    // instead of mutating the origin array\r\n    // create a new one, and update the state\r\n    const sortedProducts = productsAndAdsList.sort((a, b) => a.size - b.size);\r\n    this.setState({ productsAndAdsList: sortedProducts });\r\n  };\r\n\r\n  _sortId = () => {\r\n    var reA = /[^a-zA-Z]/g;\r\n\tvar reN = /[^0-9]/g;\r\n    const { list } = this.state;  \r\n\tlist.sort(function sortAlphaNum(a, b) {\r\n    var aA = a.id.replace(reA, \"\");\r\n    var bA = b.id.replace(reA, \"\");\r\n    if (aA === bA) {\r\n\t\tvar aN = parseInt(a.id.replace(reN, \"\"), 10);\r\n\t\tvar bN = parseInt(b.id.replace(reN, \"\"), 10);\r\n\t\treturn aN === bN ? 0 : aN > bN ? 1 : -1;\r\n    } else {\r\n\t\treturn aA > bA ? 1 : -1;\r\n\t  }\r\n\t})\r\n    this.setState({ list })\r\n  };\r\n  \r\n   _timeAgo = (prevDate) => {\r\n        const diff = Number(new Date()) - prevDate;\r\n        const minute = 60 * 1000;\r\n        const hour = minute * 60;\r\n        const day = hour * 24;\r\n        const month = day * 30;\r\n        const year = day * 365;\r\n        switch (true) {\r\n            case diff < minute:\r\n                const seconds = Math.round(diff / 1000);\r\n                 return `${seconds} ${seconds > 1 ? 'seconds' : 'second'} ago`\r\n            case diff < hour:\r\n                return Math.round(diff / minute) + ' minutes ago';\r\n            case diff < day:\r\n                return Math.round(diff / hour) + ' hours ago';\r\n            case diff < month:\r\n                return Math.round(diff / day) + ' days ago';\r\n            case diff < year:\r\n                return Math.round(diff / month) + ' months ago';\r\n            case diff > year:\r\n                return Math.round(diff / year) + ' years ago';\r\n            default:\r\n                return \"\";\r\n        }\r\n    };\r\n\r\n  componentDidMount() {\r\n\t  \r\n    this._getProducts();\r\n  }\r\n\r\n  render() {\r\n\t  \r\n\t  \r\n    const { productsAndAdsList, isLoading, hasError } = this.state;\r\nconsole.log(productsAndAdsList);\r\n    // show spinner\r\n    if (!hasError && isLoading) {\r\n      return <Loading />;\r\n    }\r\n\r\n    // show error\r\n    if (hasError && !isLoading) {\r\n      return <p>error.message</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n       \r\n       <div className=\"row\">\r\n\t\t\t<div className=\"col-12\">\r\n\t\t\t\t<button onClick={this._sortPrice}>sort by price lower to higher</button>\r\n\t\t\t\t<button onClick={this._sortSize}>sort by size small to big</button>\r\n\t\t\t\t<button onClick={this._sortId}>sort by Id</button>  \r\n\t\t\t</div>  \r\n\t\t</div>\r\n        {productsAndAdsList &&\r\n          productsAndAdsList.map(item => (\r\n            <div  key={item.id} className=\"row\">\r\n              <div className=\"col-4\">\r\n                <p> Price: ${(item.price / 100).toFixed(2)}</p>\r\n              </div>\r\n\r\n              <div className=\"col-4\">\r\n                <p style={{ fontSize: `${item.size}px` }}> {item.face}</p>\r\n              </div>\r\n\r\n\t\t\t\t<div className=\"col-3\">\r\n\t\t\t\t  <p>Published: {this._timeAgo(new Date(item.date).getTime())}</p>\r\n\t\t\t\t</div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Products;","import React from 'react';\n\nimport Products from './components/ProductsComponent'\nimport './App.css';\n\nfunction App() {\n  return (\n    \n                <Products />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}